
MCU2_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00001d0a  00001d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800174  00800174  00001eb2  2**0
                  ALLOC
  3 .stab         00001fbc  00000000  00000000  00001eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016aa  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000551a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00005830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000773d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000880f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  000099c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00009ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 0c 	call	0x18ec	; 0x18ec <main>
      8a:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e6       	ldi	r22, 0x6C	; 108
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	ec 58       	subi	r30, 0x8C	; 140
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <ADC_init>:
 */
#include "../LIB/common_macros.h" /* To use the macros like SET_BIT */
#include "adc.h"
#include <avr/io.h>
void ADC_init(const ADC_ConfigType*Config_Ptr)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <ADC_init+0x6>
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0x3F)|((Config_Ptr->ref_volt)<<6);
     d7c:	a7 e2       	ldi	r26, 0x27	; 39
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e2       	ldi	r30, 0x27	; 39
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	28 2f       	mov	r18, r24
     d88:	2f 73       	andi	r18, 0x3F	; 63
     d8a:	e9 81       	ldd	r30, Y+1	; 0x01
     d8c:	fa 81       	ldd	r31, Y+2	; 0x02
     d8e:	80 81       	ld	r24, Z
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	00 24       	eor	r0, r0
     d96:	96 95       	lsr	r25
     d98:	87 95       	ror	r24
     d9a:	07 94       	ror	r0
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	07 94       	ror	r0
     da2:	98 2f       	mov	r25, r24
     da4:	80 2d       	mov	r24, r0
     da6:	82 2b       	or	r24, r18
     da8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);
     daa:	a6 e2       	ldi	r26, 0x26	; 38
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e2       	ldi	r30, 0x26	; 38
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);
     db8:	a6 e2       	ldi	r26, 0x26	; 38
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e6 e2       	ldi	r30, 0x26	; 38
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	87 7f       	andi	r24, 0xF7	; 247
     dc4:	8c 93       	st	X, r24
	ADCSRA=(ADCSRA&0xF8)|(Config_Ptr->prescaler);
     dc6:	a6 e2       	ldi	r26, 0x26	; 38
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e6 e2       	ldi	r30, 0x26	; 38
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	98 2f       	mov	r25, r24
     dd2:	98 7f       	andi	r25, 0xF8	; 248
     dd4:	e9 81       	ldd	r30, Y+1	; 0x01
     dd6:	fa 81       	ldd	r31, Y+2	; 0x02
     dd8:	81 81       	ldd	r24, Z+1	; 0x01
     dda:	89 2b       	or	r24, r25
     ddc:	8c 93       	st	X, r24
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <ADC_readChannel>:
uint16 ADC_readChannel(uint8 ch_num)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	0f 92       	push	r0
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX&0xE0)|(ch_num&0x1F);
     df4:	a7 e2       	ldi	r26, 0x27	; 39
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e2       	ldi	r30, 0x27	; 39
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	98 2f       	mov	r25, r24
     e00:	90 7e       	andi	r25, 0xE0	; 224
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	8f 71       	andi	r24, 0x1F	; 31
     e06:	89 2b       	or	r24, r25
     e08:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     e0a:	a6 e2       	ldi	r26, 0x26	; 38
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e6 e2       	ldi	r30, 0x26	; 38
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     e18:	e6 e2       	ldi	r30, 0x26	; 38
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	80 71       	andi	r24, 0x10	; 16
     e24:	90 70       	andi	r25, 0x00	; 0
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	b9 f3       	breq	.-18     	; 0xe18 <ADC_readChannel+0x30>
	CLEAR_BIT(ADCSRA,ADIF);
     e2a:	a6 e2       	ldi	r26, 0x26	; 38
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7e       	andi	r24, 0xEF	; 239
     e36:	8c 93       	st	X, r24
	return ADC;
     e38:	e4 e2       	ldi	r30, 0x24	; 36
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
}
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <GPIO_setupPinDirection+0x6>
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <GPIO_setupPinDirection+0x8>
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	6a 83       	std	Y+2, r22	; 0x02
     e5a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	08 f0       	brcs	.+2      	; 0xe64 <GPIO_setupPinDirection+0x1c>
     e62:	d5 c0       	rjmp	.+426    	; 0x100e <GPIO_setupPinDirection+0x1c6>
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	08 f0       	brcs	.+2      	; 0xe6c <GPIO_setupPinDirection+0x24>
     e6a:	d1 c0       	rjmp	.+418    	; 0x100e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3d 83       	std	Y+5, r19	; 0x05
     e74:	2c 83       	std	Y+4, r18	; 0x04
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <GPIO_setupPinDirection+0x3a>
     e80:	43 c0       	rjmp	.+134    	; 0xf08 <GPIO_setupPinDirection+0xc0>
     e82:	2c 81       	ldd	r18, Y+4	; 0x04
     e84:	3d 81       	ldd	r19, Y+5	; 0x05
     e86:	22 30       	cpi	r18, 0x02	; 2
     e88:	31 05       	cpc	r19, r1
     e8a:	2c f4       	brge	.+10     	; 0xe96 <GPIO_setupPinDirection+0x4e>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	71 f0       	breq	.+28     	; 0xeb0 <GPIO_setupPinDirection+0x68>
     e94:	bc c0       	rjmp	.+376    	; 0x100e <GPIO_setupPinDirection+0x1c6>
     e96:	2c 81       	ldd	r18, Y+4	; 0x04
     e98:	3d 81       	ldd	r19, Y+5	; 0x05
     e9a:	22 30       	cpi	r18, 0x02	; 2
     e9c:	31 05       	cpc	r19, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <GPIO_setupPinDirection+0x5a>
     ea0:	5f c0       	rjmp	.+190    	; 0xf60 <GPIO_setupPinDirection+0x118>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <GPIO_setupPinDirection+0x66>
     eac:	85 c0       	rjmp	.+266    	; 0xfb8 <GPIO_setupPinDirection+0x170>
     eae:	af c0       	rjmp	.+350    	; 0x100e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	a1 f4       	brne	.+40     	; 0xede <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     eb6:	aa e3       	ldi	r26, 0x3A	; 58
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e3       	ldi	r30, 0x3A	; 58
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <GPIO_setupPinDirection+0x8c>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <GPIO_setupPinDirection+0x88>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	98 c0       	rjmp	.+304    	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ede:	aa e3       	ldi	r26, 0x3A	; 58
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e3       	ldi	r30, 0x3A	; 58
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <GPIO_setupPinDirection+0xb4>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <GPIO_setupPinDirection+0xb0>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	83 c0       	rjmp	.+262    	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f0e:	a7 e3       	ldi	r26, 0x37	; 55
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <GPIO_setupPinDirection+0xe4>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <GPIO_setupPinDirection+0xe0>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	6c c0       	rjmp	.+216    	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f36:	a7 e3       	ldi	r26, 0x37	; 55
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e7 e3       	ldi	r30, 0x37	; 55
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <GPIO_setupPinDirection+0x10c>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <GPIO_setupPinDirection+0x108>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	57 c0       	rjmp	.+174    	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	a1 f4       	brne	.+40     	; 0xf8e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f66:	a4 e3       	ldi	r26, 0x34	; 52
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <GPIO_setupPinDirection+0x13c>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <GPIO_setupPinDirection+0x138>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	40 c0       	rjmp	.+128    	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f8e:	a4 e3       	ldi	r26, 0x34	; 52
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e4 e3       	ldi	r30, 0x34	; 52
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <GPIO_setupPinDirection+0x164>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <GPIO_setupPinDirection+0x160>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	2b c0       	rjmp	.+86     	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fbe:	a1 e3       	ldi	r26, 0x31	; 49
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e1 e3       	ldi	r30, 0x31	; 49
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <GPIO_setupPinDirection+0x194>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <GPIO_setupPinDirection+0x190>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     fe6:	a1 e3       	ldi	r26, 0x31	; 49
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e1 e3       	ldi	r30, 0x31	; 49
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_setupPinDirection+0x1bc>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_setupPinDirection+0x1b8>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <GPIO_writePin+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <GPIO_writePin+0x8>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	6a 83       	std	Y+2, r22	; 0x02
    1030:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	08 f0       	brcs	.+2      	; 0x103a <GPIO_writePin+0x1c>
    1038:	d5 c0       	rjmp	.+426    	; 0x11e4 <GPIO_writePin+0x1c6>
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	08 f0       	brcs	.+2      	; 0x1042 <GPIO_writePin+0x24>
    1040:	d1 c0       	rjmp	.+418    	; 0x11e4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <GPIO_writePin+0x3a>
    1056:	43 c0       	rjmp	.+134    	; 0x10de <GPIO_writePin+0xc0>
    1058:	2c 81       	ldd	r18, Y+4	; 0x04
    105a:	3d 81       	ldd	r19, Y+5	; 0x05
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	2c f4       	brge	.+10     	; 0x106c <GPIO_writePin+0x4e>
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	71 f0       	breq	.+28     	; 0x1086 <GPIO_writePin+0x68>
    106a:	bc c0       	rjmp	.+376    	; 0x11e4 <GPIO_writePin+0x1c6>
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	3d 81       	ldd	r19, Y+5	; 0x05
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <GPIO_writePin+0x5a>
    1076:	5f c0       	rjmp	.+190    	; 0x1136 <GPIO_writePin+0x118>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <GPIO_writePin+0x66>
    1082:	85 c0       	rjmp	.+266    	; 0x118e <GPIO_writePin+0x170>
    1084:	af c0       	rjmp	.+350    	; 0x11e4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    108c:	ab e3       	ldi	r26, 0x3B	; 59
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e3       	ldi	r30, 0x3B	; 59
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_writePin+0x8c>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_writePin+0x88>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	98 c0       	rjmp	.+304    	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10b4:	ab e3       	ldi	r26, 0x3B	; 59
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	eb e3       	ldi	r30, 0x3B	; 59
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <GPIO_writePin+0xb4>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <GPIO_writePin+0xb0>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	83 c0       	rjmp	.+262    	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_writePin+0xe4>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_writePin+0xe0>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	6c c0       	rjmp	.+216    	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_writePin+0x10c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_writePin+0x108>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	57 c0       	rjmp	.+174    	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    113c:	a5 e3       	ldi	r26, 0x35	; 53
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e5 e3       	ldi	r30, 0x35	; 53
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <GPIO_writePin+0x13c>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <GPIO_writePin+0x138>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	40 c0       	rjmp	.+128    	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1164:	a5 e3       	ldi	r26, 0x35	; 53
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e3       	ldi	r30, 0x35	; 53
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_writePin+0x164>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_writePin+0x160>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	2b c0       	rjmp	.+86     	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	a1 f4       	brne	.+40     	; 0x11bc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_writePin+0x194>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_writePin+0x190>
    11b6:	84 2b       	or	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_writePin+0x1bc>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_writePin+0x1b8>
    11de:	80 95       	com	r24
    11e0:	84 23       	and	r24, r20
    11e2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <GPIO_readPin+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <GPIO_readPin+0x8>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	8a 83       	std	Y+2, r24	; 0x02
    1204:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1206:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	08 f0       	brcs	.+2      	; 0x1210 <GPIO_readPin+0x1c>
    120e:	84 c0       	rjmp	.+264    	; 0x1318 <GPIO_readPin+0x124>
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	08 f0       	brcs	.+2      	; 0x1218 <GPIO_readPin+0x24>
    1216:	80 c0       	rjmp	.+256    	; 0x1318 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	4c 81       	ldd	r20, Y+4	; 0x04
    1224:	5d 81       	ldd	r21, Y+5	; 0x05
    1226:	41 30       	cpi	r20, 0x01	; 1
    1228:	51 05       	cpc	r21, r1
    122a:	79 f1       	breq	.+94     	; 0x128a <GPIO_readPin+0x96>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	91 05       	cpc	r25, r1
    1234:	34 f4       	brge	.+12     	; 0x1242 <GPIO_readPin+0x4e>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	21 15       	cp	r18, r1
    123c:	31 05       	cpc	r19, r1
    123e:	69 f0       	breq	.+26     	; 0x125a <GPIO_readPin+0x66>
    1240:	6b c0       	rjmp	.+214    	; 0x1318 <GPIO_readPin+0x124>
    1242:	4c 81       	ldd	r20, Y+4	; 0x04
    1244:	5d 81       	ldd	r21, Y+5	; 0x05
    1246:	42 30       	cpi	r20, 0x02	; 2
    1248:	51 05       	cpc	r21, r1
    124a:	b9 f1       	breq	.+110    	; 0x12ba <GPIO_readPin+0xc6>
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <GPIO_readPin+0x64>
    1256:	49 c0       	rjmp	.+146    	; 0x12ea <GPIO_readPin+0xf6>
    1258:	5f c0       	rjmp	.+190    	; 0x1318 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    125a:	e9 e3       	ldi	r30, 0x39	; 57
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_readPin+0x7e>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_readPin+0x7a>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	88 23       	and	r24, r24
    127e:	19 f0       	breq	.+6      	; 0x1286 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	49 c0       	rjmp	.+146    	; 0x1318 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	47 c0       	rjmp	.+142    	; 0x1318 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    128a:	e6 e3       	ldi	r30, 0x36	; 54
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <GPIO_readPin+0xae>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <GPIO_readPin+0xaa>
    12a6:	ca 01       	movw	r24, r20
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	88 23       	and	r24, r24
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	31 c0       	rjmp	.+98     	; 0x1318 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12b6:	19 82       	std	Y+1, r1	; 0x01
    12b8:	2f c0       	rjmp	.+94     	; 0x1318 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12ba:	e3 e3       	ldi	r30, 0x33	; 51
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GPIO_readPin+0xde>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <GPIO_readPin+0xda>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	88 23       	and	r24, r24
    12de:	19 f0       	breq	.+6      	; 0x12e6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	19 c0       	rjmp	.+50     	; 0x1318 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12ea:	e0 e3       	ldi	r30, 0x30	; 48
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_readPin+0x10e>
    12fe:	55 95       	asr	r21
    1300:	47 95       	ror	r20
    1302:	8a 95       	dec	r24
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_readPin+0x10a>
    1306:	ca 01       	movw	r24, r20
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	88 23       	and	r24, r24
    130e:	19 f0       	breq	.+6      	; 0x1316 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1316:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1318:	89 81       	ldd	r24, Y+1	; 0x01
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <GPIO_setupPortDirection+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <GPIO_setupPortDirection+0x8>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	90 f5       	brcc	.+100    	; 0x13a4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3c 83       	std	Y+4, r19	; 0x04
    1348:	2b 83       	std	Y+3, r18	; 0x03
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	d1 f0       	breq	.+52     	; 0x1388 <GPIO_setupPortDirection+0x5e>
    1354:	2b 81       	ldd	r18, Y+3	; 0x03
    1356:	3c 81       	ldd	r19, Y+4	; 0x04
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <GPIO_setupPortDirection+0x3e>
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	9c 81       	ldd	r25, Y+4	; 0x04
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	61 f0       	breq	.+24     	; 0x137e <GPIO_setupPortDirection+0x54>
    1366:	1e c0       	rjmp	.+60     	; 0x13a4 <GPIO_setupPortDirection+0x7a>
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <GPIO_setupPortDirection+0x68>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	91 05       	cpc	r25, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <GPIO_setupPortDirection+0x72>
    137c:	13 c0       	rjmp	.+38     	; 0x13a4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    137e:	ea e3       	ldi	r30, 0x3A	; 58
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1388:	e7 e3       	ldi	r30, 0x37	; 55
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1392:	e4 e3       	ldi	r30, 0x34	; 52
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    139c:	e1 e3       	ldi	r30, 0x31	; 49
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_writePort+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_writePort+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	90 f5       	brcc	.+100    	; 0x142c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3c 83       	std	Y+4, r19	; 0x04
    13d0:	2b 83       	std	Y+3, r18	; 0x03
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 05       	cpc	r25, r1
    13da:	d1 f0       	breq	.+52     	; 0x1410 <GPIO_writePort+0x5e>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <GPIO_writePort+0x3e>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	61 f0       	breq	.+24     	; 0x1406 <GPIO_writePort+0x54>
    13ee:	1e c0       	rjmp	.+60     	; 0x142c <GPIO_writePort+0x7a>
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	3c 81       	ldd	r19, Y+4	; 0x04
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	81 f0       	breq	.+32     	; 0x141a <GPIO_writePort+0x68>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	81 f0       	breq	.+32     	; 0x1424 <GPIO_writePort+0x72>
    1404:	13 c0       	rjmp	.+38     	; 0x142c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	80 83       	st	Z, r24
    140e:	0e c0       	rjmp	.+28     	; 0x142c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1410:	e8 e3       	ldi	r30, 0x38	; 56
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	80 83       	st	Z, r24
    1418:	09 c0       	rjmp	.+18     	; 0x142c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	80 83       	st	Z, r24
    1422:	04 c0       	rjmp	.+8      	; 0x142c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	80 83       	st	Z, r24
			break;
		}
	}
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <GPIO_readPort+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <GPIO_readPort+0x8>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1448:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	84 30       	cpi	r24, 0x04	; 4
    144e:	90 f5       	brcc	.+100    	; 0x14b4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3c 83       	std	Y+4, r19	; 0x04
    1458:	2b 83       	std	Y+3, r18	; 0x03
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	91 05       	cpc	r25, r1
    1462:	d1 f0       	breq	.+52     	; 0x1498 <GPIO_readPort+0x5e>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	2c f4       	brge	.+10     	; 0x1478 <GPIO_readPort+0x3e>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	61 f0       	breq	.+24     	; 0x148e <GPIO_readPort+0x54>
    1476:	1e c0       	rjmp	.+60     	; 0x14b4 <GPIO_readPort+0x7a>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	81 f0       	breq	.+32     	; 0x14a2 <GPIO_readPort+0x68>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <GPIO_readPort+0x72>
    148c:	13 c0       	rjmp	.+38     	; 0x14b4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    148e:	e9 e3       	ldi	r30, 0x39	; 57
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14a2:	e3 e3       	ldi	r30, 0x33	; 51
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14ac:	e0 e3       	ldi	r30, 0x30	; 48
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <interrupt0_init>:

#include <avr/io.h>
#include <avr/interrupt.h>

void interrupt0_init(void)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    // Set the button pin (e.g., PD2) as input
    DDRD &= ~(1 << PD2);
    14cc:	a1 e3       	ldi	r26, 0x31	; 49
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e1 e3       	ldi	r30, 0x31	; 49
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8b 7f       	andi	r24, 0xFB	; 251
    14d8:	8c 93       	st	X, r24

    // Enable internal pull-up resistor on PD2
    //PORTD |= (1 << PD2);

    // Configure INT0 to trigger on the rising edge (button press connects to VCC)
        MCUCR |= (1 << ISC01) | (1 << ISC00);  // ISC01 = 1, ISC00 = 1 -> Rising edge
    14da:	a5 e5       	ldi	r26, 0x55	; 85
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e5 e5       	ldi	r30, 0x55	; 85
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	83 60       	ori	r24, 0x03	; 3
    14e6:	8c 93       	st	X, r24

    // Enable INT0
    GICR |= (1 << INT0);
    14e8:	ab e5       	ldi	r26, 0x5B	; 91
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e5       	ldi	r30, 0x5B	; 91
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	80 64       	ori	r24, 0x40	; 64
    14f4:	8c 93       	st	X, r24

    // Enable global interrupts
    sei();
    14f6:	78 94       	sei
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <timer0_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer.h"

void timer0_init(void)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1 << COM01) | (1 << CS01);
    1506:	a3 e5       	ldi	r26, 0x53	; 83
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e3 e5       	ldi	r30, 0x53	; 83
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8a 66       	ori	r24, 0x6A	; 106
    1512:	8c 93       	st	X, r24
}
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <timer1_init>:

void timer1_init(void)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    // Set fast PWM mode with ICR1 as top
    TCCR1A |= (1<<WGM11);
    1522:	af e4       	ldi	r26, 0x4F	; 79
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ef e4       	ldi	r30, 0x4F	; 79
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	8c 93       	st	X, r24
    TCCR1B |= (1<<WGM12) | (1<<WGM13);
    1530:	ae e4       	ldi	r26, 0x4E	; 78
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e4       	ldi	r30, 0x4E	; 78
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 61       	ori	r24, 0x18	; 24
    153c:	8c 93       	st	X, r24

    // Set non-inverting mode on OC1A (PD5)
    TCCR1A |= (1<<COM1A1);
    153e:	af e4       	ldi	r26, 0x4F	; 79
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ef e4       	ldi	r30, 0x4F	; 79
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 68       	ori	r24, 0x80	; 128
    154a:	8c 93       	st	X, r24

    // Set prescaler to 8 and starts PWM
    TCCR1B |= (1<<CS11);
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	82 60       	ori	r24, 0x02	; 2
    1558:	8c 93       	st	X, r24

    // Set ICR1 value to define PWM frequency
    ICR1 = 19999; // for 50Hz PWM frequency
    155a:	e6 e4       	ldi	r30, 0x46	; 70
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f e1       	ldi	r24, 0x1F	; 31
    1560:	9e e4       	ldi	r25, 0x4E	; 78
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24

}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <timer1_deactivate>:



void timer1_deactivate(void)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    // Disable Timer1 interrupts by clearing OCIE1A and OCIE1B (Compare Match A and B) and TOIE1 (Overflow Interrupt)
    TIMSK &= ~( (1 << OCIE1A) | (1 << OCIE1B) | (1 << TOIE1) );
    1574:	a9 e5       	ldi	r26, 0x59	; 89
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e9 e5       	ldi	r30, 0x59	; 89
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	83 7e       	andi	r24, 0xE3	; 227
    1580:	8c 93       	st	X, r24

    // Stop Timer1 by clearing the clock source bits in TCCR1B (CS12, CS11, and CS10)
    TCCR1B &= ~( (1 << CS12) | (1 << CS11) | (1 << CS10) );
    1582:	ae e4       	ldi	r26, 0x4E	; 78
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ee e4       	ldi	r30, 0x4E	; 78
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 7f       	andi	r24, 0xF8	; 248
    158e:	8c 93       	st	X, r24

    // Optionally reset Timer1 counter
    TCNT1 = 0;
    1590:	ec e4       	ldi	r30, 0x4C	; 76
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	11 82       	std	Z+1, r1	; 0x01
    1596:	10 82       	st	Z, r1
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <watchdog_init>:



void watchdog_init(void) {
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupts
    cli();
    15a6:	f8 94       	cli

    //Activate watchdog
    WDTCR = (1 << WDE) | (1 << WDP0);
    15a8:	e1 e4       	ldi	r30, 0x41	; 65
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	89 e0       	ldi	r24, 0x09	; 9
    15ae:	80 83       	st	Z, r24

    //Enable interrupts
    sei();
    15b0:	78 94       	sei
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <UART_init+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <UART_init+0x8>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <UART_init+0xa>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	6b 83       	std	Y+3, r22	; 0x03
    15c8:	7c 83       	std	Y+4, r23	; 0x04
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    15ce:	1a 82       	std	Y+2, r1	; 0x02
    15d0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    15d2:	eb e2       	ldi	r30, 0x2B	; 43
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    15da:	ea e2       	ldi	r30, 0x2A	; 42
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	88 e1       	ldi	r24, 0x18	; 24
    15e0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    15e2:	e0 e4       	ldi	r30, 0x40	; 64
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	86 e8       	ldi	r24, 0x86	; 134
    15e8:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	ad 81       	ldd	r26, Y+5	; 0x05
    15f0:	be 81       	ldd	r27, Y+6	; 0x06
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	aa 1f       	adc	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	aa 1f       	adc	r26, r26
    1608:	bb 1f       	adc	r27, r27
    160a:	9c 01       	movw	r18, r24
    160c:	ad 01       	movw	r20, r26
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	92 e1       	ldi	r25, 0x12	; 18
    1612:	aa e7       	ldi	r26, 0x7A	; 122
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__udivmodsi4>
    161e:	da 01       	movw	r26, r20
    1620:	c9 01       	movw	r24, r18
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1628:	e0 e4       	ldi	r30, 0x40	; 64
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	89 2f       	mov	r24, r25
    1632:	99 27       	eor	r25, r25
    1634:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1636:	e9 e2       	ldi	r30, 0x29	; 41
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	80 83       	st	Z, r24

	//Enable the RX Complete interrupt
	UCSRB |= (1 << RXCIE);
    163e:	aa e2       	ldi	r26, 0x2A	; 42
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ea e2       	ldi	r30, 0x2A	; 42
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	8c 93       	st	X, r24
}
    164c:	26 96       	adiw	r28, 0x06	; 6
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    166a:	eb e2       	ldi	r30, 0x2B	; 43
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	80 72       	andi	r24, 0x20	; 32
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	b9 f3       	breq	.-18     	; 0x166a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    167c:	ec e2       	ldi	r30, 0x2C	; 44
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1694:	eb e2       	ldi	r30, 0x2B	; 43
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	88 23       	and	r24, r24
    169c:	dc f7       	brge	.-10     	; 0x1694 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    169e:	ec e2       	ldi	r30, 0x2C	; 44
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
}
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <UART_sendString+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	9b 83       	std	Y+3, r25	; 0x03
    16b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	0e c0       	rjmp	.+28     	; 0x16da <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	fc 01       	movw	r30, r24
    16ca:	e2 0f       	add	r30, r18
    16cc:	f3 1f       	adc	r31, r19
    16ce:	80 81       	ld	r24, Z
    16d0:	0e 94 2f 0b 	call	0x165e	; 0x165e <UART_sendByte>
		i++;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	8f 5f       	subi	r24, 0xFF	; 255
    16d8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	9b 81       	ldd	r25, Y+3	; 0x03
    16e4:	fc 01       	movw	r30, r24
    16e6:	e2 0f       	add	r30, r18
    16e8:	f3 1f       	adc	r31, r19
    16ea:	80 81       	ld	r24, Z
    16ec:	88 23       	and	r24, r24
    16ee:	39 f7       	brne	.-50     	; 0x16be <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <UART_receiveString+0x6>
    1702:	00 d0       	rcall	.+0      	; 0x1704 <UART_receiveString+0x8>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9c 83       	std	Y+4, r25	; 0x04
    170a:	8b 83       	std	Y+3, r24	; 0x03
    uint8 i = 0;
    170c:	1a 82       	std	Y+2, r1	; 0x02
    uint8 received_byte;

    // Initialize the buffer
    Str[0] = '\0';
    170e:	eb 81       	ldd	r30, Y+3	; 0x03
    1710:	fc 81       	ldd	r31, Y+4	; 0x04
    1712:	10 82       	st	Z, r1

    while (1) {
        // Receive a byte from UART
        received_byte = UART_recieveByte();
    1714:	0e 94 46 0b 	call	0x168c	; 0x168c <UART_recieveByte>
    1718:	89 83       	std	Y+1, r24	; 0x01

        // Check for the end of the string or buffer overflow
        if (received_byte == '#') {
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	83 32       	cpi	r24, 0x23	; 35
    171e:	81 f0       	breq	.+32     	; 0x1740 <UART_receiveString+0x44>
            break;  // Exit loop when '#' is received
        }

        // Store received byte in the buffer
        Str[i++] = received_byte;
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	fc 01       	movw	r30, r24
    172c:	e2 0f       	add	r30, r18
    172e:	f3 1f       	adc	r31, r19
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	80 83       	st	Z, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	8a 83       	std	Y+2, r24	; 0x02

        // Avoid buffer overflow by assuming the maximum size of 15
        if (i >= 14) {
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	8e 30       	cpi	r24, 0x0E	; 14
    173e:	50 f3       	brcs	.-44     	; 0x1714 <UART_receiveString+0x18>
            break;  // Exit loop if buffer is almost full
        }
    }

    // Null-terminate the string
    Str[i] = '\0';
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	fc 01       	movw	r30, r24
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
    1750:	10 82       	st	Z, r1
}
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <set_speed>:
 */

#include "dc_motor.h"

void set_speed(float speed_ratio)
{
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <set_speed+0xa>
    176a:	00 d0       	rcall	.+0      	; 0x176c <set_speed+0xc>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	69 83       	std	Y+1, r22	; 0x01
    1772:	7a 83       	std	Y+2, r23	; 0x02
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	9c 83       	std	Y+4, r25	; 0x04
	motor_speed=speed_ratio * 255;
    1778:	0c e5       	ldi	r16, 0x5C	; 92
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	69 81       	ldd	r22, Y+1	; 0x01
    177e:	7a 81       	ldd	r23, Y+2	; 0x02
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	53 e4       	ldi	r21, 0x43	; 67
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	f8 01       	movw	r30, r16
    17a2:	80 83       	st	Z, r24
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <pot_read>:
#include <avr/io.h>

#include "../MCAL/adc.h"
#include "pot.h"

float pot_read(void) {
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	2a 97       	sbiw	r28, 0x0a	; 10
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61

	//Read ADC value from
	uint16_t adc_value = ADC_readChannel(0);
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	0e 94 f4 06 	call	0xde8	; 0xde8 <ADC_readChannel>
    17d0:	9a 87       	std	Y+10, r25	; 0x0a
    17d2:	89 87       	std	Y+9, r24	; 0x09

	//Convert ADC value to temperature
	float voltage = adc_value * (5.0 / 1024.0);
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	cc 01       	movw	r24, r24
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 ea       	ldi	r20, 0xA0	; 160
    17f4:	5b e3       	ldi	r21, 0x3B	; 59
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	af 83       	std	Y+7, r26	; 0x07
    1804:	b8 87       	std	Y+8, r27	; 0x08
	float pot = (voltage/5) * pot_value;
    1806:	6d 81       	ldd	r22, Y+5	; 0x05
    1808:	7e 81       	ldd	r23, Y+6	; 0x06
    180a:	8f 81       	ldd	r24, Y+7	; 0x07
    180c:	98 85       	ldd	r25, Y+8	; 0x08
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 ea       	ldi	r20, 0xA0	; 160
    1814:	50 e4       	ldi	r21, 0x40	; 64
    1816:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a e7       	ldi	r20, 0x7A	; 122
    1828:	54 e4       	ldi	r21, 0x44	; 68
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	ab 83       	std	Y+3, r26	; 0x03
    1838:	bc 83       	std	Y+4, r27	; 0x04
	return pot;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	ab 81       	ldd	r26, Y+3	; 0x03
    1840:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	2a 96       	adiw	r28, 0x0a	; 10
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <set_right_angle>:
 *      Author: Tadros Maged
 */
#include "servo_motor.h"

void set_right_angle(void)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
	motor_angle= 1470;
    1860:	ea e4       	ldi	r30, 0x4A	; 74
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8e eb       	ldi	r24, 0xBE	; 190
    1866:	95 e0       	ldi	r25, 0x05	; 5
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <set_zero_angle>:

void set_zero_angle(void)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	motor_angle= 1000;
    187a:	ea e4       	ldi	r30, 0x4A	; 74
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	88 ee       	ldi	r24, 0xE8	; 232
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	80 83       	st	Z, r24
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <set_angle>:


void set_angle(uint8_t angle)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <set_angle+0x6>
    1892:	0f 92       	push	r0
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01

    switch(angle)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3b 83       	std	Y+3, r19	; 0x03
    18a2:	2a 83       	std	Y+2, r18	; 0x02
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	31 f0       	breq	.+12     	; 0x18b8 <set_angle+0x2c>
    18ac:	2a 81       	ldd	r18, Y+2	; 0x02
    18ae:	3b 81       	ldd	r19, Y+3	; 0x03
    18b0:	2a 35       	cpi	r18, 0x5A	; 90
    18b2:	31 05       	cpc	r19, r1
    18b4:	41 f0       	breq	.+16     	; 0x18c6 <set_angle+0x3a>
    18b6:	0e c0       	rjmp	.+28     	; 0x18d4 <set_angle+0x48>
    {
    case 0:
    	motor_angle = 1500;
    18b8:	ea e4       	ldi	r30, 0x4A	; 74
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8c ed       	ldi	r24, 0xDC	; 220
    18be:	95 e0       	ldi	r25, 0x05	; 5
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <set_angle+0x54>
    	break;

    case 90:
    	motor_angle = 2500;
    18c6:	ea e4       	ldi	r30, 0x4A	; 74
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	84 ec       	ldi	r24, 0xC4	; 196
    18cc:	99 e0       	ldi	r25, 0x09	; 9
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <set_angle+0x54>
    	break;

    	default: motor_angle = 1500;
    18d4:	ea e4       	ldi	r30, 0x4A	; 74
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	8c ed       	ldi	r24, 0xDC	; 220
    18da:	95 e0       	ldi	r25, 0x05	; 5
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    }

}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <main>:
char state;



int main(void)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <main+0x6>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	//Enable interrupts
	sei();
    18f6:	78 94       	sei

	//Set PWM pin as output
	GPIO_setupPinDirection(PORTB_ID,PB3,PIN_OUTPUT);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	63 e0       	ldi	r22, 0x03	; 3
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 24 07 	call	0xe48	; 0xe48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID,PD5,PIN_OUTPUT);
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	65 e0       	ldi	r22, 0x05	; 5
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 24 07 	call	0xe48	; 0xe48 <GPIO_setupPinDirection>

	//Set timer0 as fast PWM, OCR0 non-inverting and prescaler = 64
	timer0_init();
    190c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <timer0_init>

	//Set timer0 as fast PWM, OCR1A non-inverting and prescaler = 8
	timer1_init();
    1910:	0e 94 8d 0a 	call	0x151a	; 0x151a <timer1_init>


	//ADC init
	ADC_ConfigType config={
			ADC_VCC,ADC_PR64
	};
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	86 e0       	ldi	r24, 0x06	; 6
    1918:	8a 83       	std	Y+2, r24	; 0x02

	ADC_init(&config);
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ADC_init>

	//UART init
	UART_init(9600);
    1922:	60 e8       	ldi	r22, 0x80	; 128
    1924:	75 e2       	ldi	r23, 0x25	; 37
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <UART_init>

	set_speed(0);
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 b0 0b 	call	0x1760	; 0x1760 <set_speed>

	set_angle(0);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	0e 94 46 0c 	call	0x188c	; 0x188c <set_angle>

	//LED pins set to O/P
	GPIO_setupPinDirection(PORTC_ID,PC0,PIN_OUTPUT);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 24 07 	call	0xe48	; 0xe48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PC1,PIN_OUTPUT);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 24 07 	call	0xe48	; 0xe48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PC2,PIN_OUTPUT);
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	41 e0       	ldi	r20, 0x01	; 1
    195a:	0e 94 24 07 	call	0xe48	; 0xe48 <GPIO_setupPinDirection>

	//Buzzer pin set to O/P
	GPIO_setupPinDirection(PORTB_ID,PB0,PIN_OUTPUT);
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 24 07 	call	0xe48	; 0xe48 <GPIO_setupPinDirection>


	while(1)
	{

		pot=pot_read();
    1968:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <pot_read>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	80 93 75 01 	sts	0x0175, r24
    1974:	90 93 76 01 	sts	0x0176, r25
    1978:	a0 93 77 01 	sts	0x0177, r26
    197c:	b0 93 78 01 	sts	0x0178, r27
		set_speed(pot/pot_value);
    1980:	80 91 75 01 	lds	r24, 0x0175
    1984:	90 91 76 01 	lds	r25, 0x0176
    1988:	a0 91 77 01 	lds	r26, 0x0177
    198c:	b0 91 78 01 	lds	r27, 0x0178
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <set_speed>
    19ac:	dd cf       	rjmp	.-70     	; 0x1968 <main+0x7c>

000019ae <__vector_13>:
	}
}

ISR(USART_RXC_vect) {
    19ae:	1f 92       	push	r1
    19b0:	0f 92       	push	r0
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	0f 92       	push	r0
    19b6:	11 24       	eor	r1, r1
    19b8:	2f 93       	push	r18
    19ba:	3f 93       	push	r19
    19bc:	4f 93       	push	r20
    19be:	5f 93       	push	r21
    19c0:	6f 93       	push	r22
    19c2:	7f 93       	push	r23
    19c4:	8f 93       	push	r24
    19c6:	9f 93       	push	r25
    19c8:	af 93       	push	r26
    19ca:	bf 93       	push	r27
    19cc:	ef 93       	push	r30
    19ce:	ff 93       	push	r31
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62

	cli();
    19d8:	f8 94       	cli
	// Store the received data in a global variable
	UART_receiveString(receivedMessage);
    19da:	8e e7       	ldi	r24, 0x7E	; 126
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <UART_receiveString>

	if(strcmp((char*)receivedMessage, "g") == 0)
    19e2:	8e e7       	ldi	r24, 0x7E	; 126
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	20 e6       	ldi	r18, 0x60	; 96
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	31 f4       	brne	.+12     	; 0x1a00 <__vector_13+0x52>
	{
		state='g';
    19f4:	87 e6       	ldi	r24, 0x67	; 103
    19f6:	80 93 79 01 	sts	0x0179, r24
		normalState();
    19fa:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <normalState>
    19fe:	4a c0       	rjmp	.+148    	; 0x1a94 <__vector_13+0xe6>
	}
	else if(strcmp((char*)receivedMessage, "y") == 0)
    1a00:	8e e7       	ldi	r24, 0x7E	; 126
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	22 e6       	ldi	r18, 0x62	; 98
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	b9 01       	movw	r22, r18
    1a0a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	31 f4       	brne	.+12     	; 0x1a1e <__vector_13+0x70>
	{
		state='y';
    1a12:	89 e7       	ldi	r24, 0x79	; 121
    1a14:	80 93 79 01 	sts	0x0179, r24
		normalState();
    1a18:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <normalState>
    1a1c:	3b c0       	rjmp	.+118    	; 0x1a94 <__vector_13+0xe6>
	}
	else if(strcmp((char*)receivedMessage, "r") == 0)
    1a1e:	8e e7       	ldi	r24, 0x7E	; 126
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	24 e6       	ldi	r18, 0x64	; 100
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	b9 01       	movw	r22, r18
    1a28:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	31 f4       	brne	.+12     	; 0x1a3c <__vector_13+0x8e>
	{
		state='r';
    1a30:	82 e7       	ldi	r24, 0x72	; 114
    1a32:	80 93 79 01 	sts	0x0179, r24
		normalState();
    1a36:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <normalState>
    1a3a:	2c c0       	rjmp	.+88     	; 0x1a94 <__vector_13+0xe6>
	}
	else if(strcmp((char*)receivedMessage, "e") == 0)
    1a3c:	8e e7       	ldi	r24, 0x7E	; 126
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	26 e6       	ldi	r18, 0x66	; 102
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	b9 01       	movw	r22, r18
    1a46:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	31 f4       	brne	.+12     	; 0x1a5a <__vector_13+0xac>
	{
		state='e';
    1a4e:	85 e6       	ldi	r24, 0x65	; 101
    1a50:	80 93 79 01 	sts	0x0179, r24
		emergencyState();
    1a54:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <emergencyState>
    1a58:	1d c0       	rjmp	.+58     	; 0x1a94 <__vector_13+0xe6>
	}
	else if(strcmp((char*)receivedMessage, "a") == 0)
    1a5a:	8e e7       	ldi	r24, 0x7E	; 126
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	28 e6       	ldi	r18, 0x68	; 104
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	b9 01       	movw	r22, r18
    1a64:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	31 f4       	brne	.+12     	; 0x1a78 <__vector_13+0xca>
	{
		state='a';
    1a6c:	81 e6       	ldi	r24, 0x61	; 97
    1a6e:	80 93 79 01 	sts	0x0179, r24
		abnormalState();
    1a72:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <abnormalState>
    1a76:	0e c0       	rjmp	.+28     	; 0x1a94 <__vector_13+0xe6>
	}
	else if(strcmp((char*)receivedMessage, "s") == 0)
    1a78:	8e e7       	ldi	r24, 0x7E	; 126
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	2a e6       	ldi	r18, 0x6A	; 106
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	b9 01       	movw	r22, r18
    1a82:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <__vector_13+0xe6>
	{
		state='s';
    1a8a:	83 e7       	ldi	r24, 0x73	; 115
    1a8c:	80 93 79 01 	sts	0x0179, r24
		shutdown();
    1a90:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <shutdown>
	}

	sei();
    1a94:	78 94       	sei
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	ff 91       	pop	r31
    1a9c:	ef 91       	pop	r30
    1a9e:	bf 91       	pop	r27
    1aa0:	af 91       	pop	r26
    1aa2:	9f 91       	pop	r25
    1aa4:	8f 91       	pop	r24
    1aa6:	7f 91       	pop	r23
    1aa8:	6f 91       	pop	r22
    1aaa:	5f 91       	pop	r21
    1aac:	4f 91       	pop	r20
    1aae:	3f 91       	pop	r19
    1ab0:	2f 91       	pop	r18
    1ab2:	0f 90       	pop	r0
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <normalState>:
/*****************************************************************************/



void normalState(void)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	if(state=='g')
    1ac4:	80 91 79 01 	lds	r24, 0x0179
    1ac8:	87 36       	cpi	r24, 0x67	; 103
    1aca:	a9 f4       	brne	.+42     	; 0x1af6 <normalState+0x3a>
	{
		//Lighten green led
		GPIO_writePin(PORTC_ID,PC0,LOGIC_HIGH);
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PC1,LOGIC_LOW);
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PC2,LOGIC_LOW);
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>

		//Deactivate buzzer
		GPIO_writePin(PORTB_ID,PB0,LOGIC_LOW);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
    1af4:	31 c0       	rjmp	.+98     	; 0x1b58 <normalState+0x9c>
	}
	else if(state=='y')
    1af6:	80 91 79 01 	lds	r24, 0x0179
    1afa:	89 37       	cpi	r24, 0x79	; 121
    1afc:	a9 f4       	brne	.+42     	; 0x1b28 <normalState+0x6c>
	{
		//Lighten yellow led
		GPIO_writePin(PORTC_ID,PC0,LOGIC_LOW);
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PC1,LOGIC_HIGH);
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PC2,LOGIC_LOW);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	62 e0       	ldi	r22, 0x02	; 2
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>

		//Deactivate buzzer
		GPIO_writePin(PORTB_ID,PB0,LOGIC_LOW);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
    1b26:	18 c0       	rjmp	.+48     	; 0x1b58 <normalState+0x9c>
	}
	else if(state=='r')
    1b28:	80 91 79 01 	lds	r24, 0x0179
    1b2c:	82 37       	cpi	r24, 0x72	; 114
    1b2e:	a1 f4       	brne	.+40     	; 0x1b58 <normalState+0x9c>
	{
		//Lighten red led
		GPIO_writePin(PORTC_ID,PC0,LOGIC_LOW);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PC1,LOGIC_LOW);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PC2,LOGIC_HIGH);
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	62 e0       	ldi	r22, 0x02	; 2
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>

		//Deactivate buzzer
		GPIO_writePin(PORTB_ID,PB0,LOGIC_LOW);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	}
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <emergencyState>:



void emergencyState(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	//Lighten red led
	GPIO_writePin(PORTC_ID,PC0,LOGIC_LOW);
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PC1,LOGIC_LOW);
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PC2,LOGIC_HIGH);
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>

	//Activate buzzer
	GPIO_writePin(PORTB_ID,PB0,LOGIC_HIGH);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>


}
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <abnormalState>:



void abnormalState(void)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	//Lighten red led
	GPIO_writePin(PORTC_ID,PC0,LOGIC_LOW);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PC1,LOGIC_LOW);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PC2,LOGIC_HIGH);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>

	//Activate buzzer
	GPIO_writePin(PORTB_ID,PB0,LOGIC_HIGH);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>

	set_right_angle();
    1bc4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <set_right_angle>

	shutdown();
    1bc8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <shutdown>

}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <shutdown>:


void shutdown(void)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	set_speed(0);
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <set_speed>

	set_angle(90);
    1be6:	8a e5       	ldi	r24, 0x5A	; 90
    1be8:	0e 94 46 0c 	call	0x188c	; 0x188c <set_angle>

	//Turn all leds off
	GPIO_writePin(PORTC_ID,PC0,LOGIC_LOW);
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PC1,LOGIC_LOW);
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PC2,LOGIC_LOW);
    1c00:	82 e0       	ldi	r24, 0x02	; 2
    1c02:	62 e0       	ldi	r22, 0x02	; 2
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	0e 94 0f 08 	call	0x101e	; 0x101e <GPIO_writePin>


	while(1)
	{
		UART_receiveString(receivedMessage);
    1c0a:	8e e7       	ldi	r24, 0x7E	; 126
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <UART_receiveString>

		if(strcmp((char*)receivedMessage, "r") != 0 && strcmp((char*)receivedMessage, "s") != 0)
    1c12:	8e e7       	ldi	r24, 0x7E	; 126
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	24 e6       	ldi	r18, 0x64	; 100
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	b9 01       	movw	r22, r18
    1c1c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	99 f3       	breq	.-26     	; 0x1c0a <shutdown+0x38>
    1c24:	8e e7       	ldi	r24, 0x7E	; 126
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	2a e6       	ldi	r18, 0x6A	; 106
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	b9 01       	movw	r22, r18
    1c2e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <strcmp>
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	51 f3       	breq	.-44     	; 0x1c0a <shutdown+0x38>
		{
			break;
		}
	}

	set_angle(0);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	0e 94 46 0c 	call	0x188c	; 0x188c <set_angle>

}
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <__udivmodsi4>:
    1c42:	a1 e2       	ldi	r26, 0x21	; 33
    1c44:	1a 2e       	mov	r1, r26
    1c46:	aa 1b       	sub	r26, r26
    1c48:	bb 1b       	sub	r27, r27
    1c4a:	fd 01       	movw	r30, r26
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <__udivmodsi4_ep>

00001c4e <__udivmodsi4_loop>:
    1c4e:	aa 1f       	adc	r26, r26
    1c50:	bb 1f       	adc	r27, r27
    1c52:	ee 1f       	adc	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	a2 17       	cp	r26, r18
    1c58:	b3 07       	cpc	r27, r19
    1c5a:	e4 07       	cpc	r30, r20
    1c5c:	f5 07       	cpc	r31, r21
    1c5e:	20 f0       	brcs	.+8      	; 0x1c68 <__udivmodsi4_ep>
    1c60:	a2 1b       	sub	r26, r18
    1c62:	b3 0b       	sbc	r27, r19
    1c64:	e4 0b       	sbc	r30, r20
    1c66:	f5 0b       	sbc	r31, r21

00001c68 <__udivmodsi4_ep>:
    1c68:	66 1f       	adc	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	1a 94       	dec	r1
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <__udivmodsi4_loop>
    1c74:	60 95       	com	r22
    1c76:	70 95       	com	r23
    1c78:	80 95       	com	r24
    1c7a:	90 95       	com	r25
    1c7c:	9b 01       	movw	r18, r22
    1c7e:	ac 01       	movw	r20, r24
    1c80:	bd 01       	movw	r22, r26
    1c82:	cf 01       	movw	r24, r30
    1c84:	08 95       	ret

00001c86 <__prologue_saves__>:
    1c86:	2f 92       	push	r2
    1c88:	3f 92       	push	r3
    1c8a:	4f 92       	push	r4
    1c8c:	5f 92       	push	r5
    1c8e:	6f 92       	push	r6
    1c90:	7f 92       	push	r7
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	ca 1b       	sub	r28, r26
    1cb0:	db 0b       	sbc	r29, r27
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	09 94       	ijmp

00001cbe <__epilogue_restores__>:
    1cbe:	2a 88       	ldd	r2, Y+18	; 0x12
    1cc0:	39 88       	ldd	r3, Y+17	; 0x11
    1cc2:	48 88       	ldd	r4, Y+16	; 0x10
    1cc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ccc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cce:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cd0:	b9 84       	ldd	r11, Y+9	; 0x09
    1cd2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cd4:	df 80       	ldd	r13, Y+7	; 0x07
    1cd6:	ee 80       	ldd	r14, Y+6	; 0x06
    1cd8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cda:	0c 81       	ldd	r16, Y+4	; 0x04
    1cdc:	1b 81       	ldd	r17, Y+3	; 0x03
    1cde:	aa 81       	ldd	r26, Y+2	; 0x02
    1ce0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce2:	ce 0f       	add	r28, r30
    1ce4:	d1 1d       	adc	r29, r1
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	ed 01       	movw	r28, r26
    1cf2:	08 95       	ret

00001cf4 <strcmp>:
    1cf4:	fb 01       	movw	r30, r22
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	8d 91       	ld	r24, X+
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	80 19       	sub	r24, r0
    1cfe:	01 10       	cpse	r0, r1
    1d00:	d9 f3       	breq	.-10     	; 0x1cf8 <strcmp+0x4>
    1d02:	99 0b       	sbc	r25, r25
    1d04:	08 95       	ret

00001d06 <_exit>:
    1d06:	f8 94       	cli

00001d08 <__stop_program>:
    1d08:	ff cf       	rjmp	.-2      	; 0x1d08 <__stop_program>
